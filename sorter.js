import { TFolder, TFile } from "obsidian";
import SettingsUtils from "settingsUtils";
export default class Sorter {
    static startSorting(fileExpView, settings) {
        this.fileExpView = fileExpView;
        this.settings = settings;
        this.sort();
    }
    // modified from js source code
    static sort() {
        if (!this.fileExpView.ready || !this.fileExpView.containerEl.isShown())
            return;
        const vault = this.fileExpView.app.vault;
        // source code from js
        const itemArr = this.fileExpView.fileItems;
        const tree = this.fileExpView.tree;
        const navContainer = this.fileExpView.navFileContainerEl;
        const scrollTop = navContainer.scrollTop;
        // init all folder
        this.fileWeightsByFolder = {};
        this.fileWeightsByFolder[vault.getRoot().path] = {};
        const folderItemArr = [];
        for (const k in itemArr) {
            const item = itemArr[k];
            const folderOr = item.file;
            // expect folder
            if (!(itemArr.hasOwnProperty(k) && folderOr && (folderOr instanceof TFolder)))
                continue;
            folderItemArr.push(item);
            this.fileWeightsByFolder[folderOr.path] = {};
        }
        // gen all weights
        this.genWeightsByPath(vault.getRoot());
        for (const folderItem of folderItemArr) {
            // definitely a folder
            this.genWeightsByPath(folderItem.file);
        }
        // sort all by weight
        tree.infinityScroll.rootEl.vChildren.setChildren(this.getSortedFolderItems(vault.getRoot()));
        for (const folderItem of folderItemArr) {
            folderItem.vChildren.setChildren(this.getSortedFolderItems(folderItem.file));
        }
        // debug
        // console.log(this.fileWeightsByFolder)
        navContainer.scrollTop = scrollTop;
        tree.infinityScroll.compute();
        // deleted !isShown source code, do nothing
    }
    static genWeightsByPath(folder) {
        const weightByPath = this.fileWeightsByFolder[folder.path];
        // iterate files in folder
        for (const file of folder.children) {
            const weight = (() => {
                if (file instanceof TFolder)
                    return this.settings.weightForFolder; // default for folder
                if (!(file instanceof TFile) || (file.extension !== 'md')) { // not file or file not .md
                    return this.settings.weightForOtherFile;
                }
                if (file.name === 'index.md') { // index.md, set weight of folder in folder.parent
                    if (file.parent) {
                        // override default weight of folder
                        this.fileWeightsByFolder[file.parent.path][file.path] = this.getWeightOfMd(file);
                    }
                    return this.settings.weightForIndex;
                }
                // normal .md
                return this.getWeightOfMd(file);
            })();
            // don't override exist weight(folder)
            if (!weightByPath[file.path])
                weightByPath[file.path] = weight;
        }
    }
    static getWeightOfMd(file) {
        // any file with extension ".md" own its cachedMetadata, even it's not a markdown file !!!
        // empty markdown: cachedMetadata = {} ( {} = true )
        const cachedMetadata = this.fileExpView.app.metadataCache.getFileCache(file);
        const frontmatter = cachedMetadata.frontmatter;
        if (!frontmatter)
            return this.settings.weightForMarkdownFile;
        const rawWeight = frontmatter[this.settings.sortKey];
        return SettingsUtils.getInputOrDflt(String(rawWeight), 'weightForMarkdownFile');
    }
}
Sorter.getSortedFolderItems = function (folder) {
    const weightByPath = this.fileWeightsByFolder[folder.path];
    const children = folder.children.slice();
    children.sort((a, b) => { return weightByPath[a.path] - weightByPath[b.path]; });
    const sortedItems = [];
    for (const child of children) {
        sortedItems.push(this.fileExpView.fileItems[child.path]);
    }
    return sortedItems;
};
//# sourceMappingURL=data:application/json;base64,